#!/usr/bin/env php
<?php
$switches = [
    'codesnif-std-psr2' => [
        'display-name' => 'PSR-2',
        'flags' => [ '--standard=PSR2' ],
        'display-flags' => '--standard=PSR2',
        'conflicts' => [
            'codesnif-std-psr1',
            'codesnif-std-zend',
            'codesnif-std-pear',
            'codesnif-std-phpcs',
            'codesnif-std-squiz',
            'codesnif-std-mysource',
        ],
    ],
    'codesnif-std-psr1' => [
        'display-name' => 'PSR-1',
        'flags' => [ '--standard=PSR1' ],
        'display-flags' => '--standard=PSR1',
        'conflicts' => [
            'codesnif-std-psr2',
            'codesnif-std-zend',
            'codesnif-std-pear',
            'codesnif-std-phpcs',
            'codesnif-std-squiz',
            'codesnif-std-mysource',
        ],
    ],
    'codesnif-std-zend' => [
        'display-name' => 'Zend',
        'flags' => [ '--standard=Zend' ],
        'display-flags' => '--standard=Zend',
        'conflicts' => [
            'codesnif-std-psr2',
            'codesnif-std-psr1',
            'codesnif-std-pear',
            'codesnif-std-phpcs',
            'codesnif-std-squiz',
            'codesnif-std-mysource',
        ],
    ],
    'codesnif-std-pear' => [
        'display-name' => 'PEAR',
        'flags' => [ '--standard=PEAR' ],
        'display-flags' => '--standard=PEAR',
        'conflicts' => [
            'codesnif-std-psr2',
            'codesnif-std-psr1',
            'codesnif-std-zend',
            'codesnif-std-phpcs',
            'codesnif-std-squiz',
            'codesnif-std-mysource',
        ],
    ],
    'codesnif-std-phpcs' => [
        'display-name' => 'PHPCS',
        'flags' => [ '--standard=PHPCS' ],
        'display-flags' => '--standard=PHPCS',
        'conflicts' => [
            'codesnif-std-psr2',
            'codesnif-std-psr1',
            'codesnif-std-zend',
            'codesnif-std-pear',
            'codesnif-std-squiz',
            'codesnif-std-mysource',
        ],
    ],
    'codesnif-std-squiz' => [
        'display-name' => 'Squiz',
        'flags' => [ '--standard=Squiz' ],
        'display-flags' => '--standard=Squiz',
        'conflicts' => [
            'codesnif-std-psr2',
            'codesnif-std-psr1',
            'codesnif-std-zend',
            'codesnif-std-pear',
            'codesnif-std-phpcs',
            'codesnif-std-mysource',
        ],
    ],
    'codesnif-std-mysource' => [
        'display-name' => 'MySource',
        'flags' => [ '--standard=MySource' ],
        'display-flags' => '--standard=MySource',
        'conflicts' => [
            'codesnif-std-psr2',
            'codesnif-std-psr1',
            'codesnif-std-zend',
            'codesnif-std-pear',
            'codesnif-std-phpcs',
            'codesnif-std-squiz',
        ],
    ],
    'phpmd-cleancode' => [
        'display-name' => 'cleancode',
        'flags' => [ '--cleancode' ],
        'display-flags' => 'cleancode',
    ],
    'phpmd-codesize' => [
        'display-name' => 'codesize',
        'flags' => [ '--codesize' ],
        'display-flags' => 'codesize',
    ],
    'phpmd-controversial' => [
        'display-name' => 'controversial',
        'flags' => [ '--controversial' ],
        'display-flags' => 'controversial',
    ],
    'phpmd-design' => [
        'display-name' => 'design',
        'flags' => [ '--design' ],
        'display-flags' => 'design',
    ],
    'phpmd-naming' => [
        'display-name' => 'naming',
        'flags' => [ '--naming' ],
        'display-flags' => 'naming',
    ],
    'phpmd-unusedcode' => [
        'display-name' => 'unusedcode',
        'flags' => [ '--unusedcode' ],
        'display-flags' => 'unusedcode',
    ],
    'phpcpd-fuzzy' => [
        'display-name' => 'fuzzy',
        'flags' => [ '--fuzzy' ],
        'display-flags' => '--fuzzy',
    ],
    'phpcpd-min-lines-2' => [
        'display-name' => 'min-lines = 2',
        'flags' => [ '--min-lines=2' ],
        'display-flags' => '--min-lines=2',
        'conflicts' => [ 'phpcpd-min-lines-2', 'phpcpd-min-lines-4', 'phpcpd-min-lines-7', 'phpcpd-min-lines-10', 'phpcpd-min-lines-15' ],
    ],
    'phpcpd-min-lines-4' => [
        'display-name' => 'min-lines = 4 (default)',
        'flags' => [ '--min-lines=4' ],
        'display-flags' => '--min-lines=4',
        'conflicts' => [ 'phpcpd-min-lines-2', 'phpcpd-min-lines-4', 'phpcpd-min-lines-7', 'phpcpd-min-lines-10', 'phpcpd-min-lines-15' ],
    ],
    'phpcpd-min-lines-7' => [
        'display-name' => 'min-lines = 7',
        'flags' => [ '--min-lines=7' ],
        'display-flags' => '--min-lines=7',
        'conflicts' => [ 'phpcpd-min-lines-2', 'phpcpd-min-lines-4', 'phpcpd-min-lines-7', 'phpcpd-min-lines-10', 'phpcpd-min-lines-15' ],
    ],
    'phpcpd-min-lines-10' => [
        'display-name' => 'min-lines = 10',
        'flags' => [ '--min-lines=10' ],
        'display-flags' => '--min-lines=10',
        'conflicts' => [ 'phpcpd-min-lines-2', 'phpcpd-min-lines-4', 'phpcpd-min-lines-7', 'phpcpd-min-lines-10', 'phpcpd-min-lines-15' ],
    ],
    'phpcpd-min-lines-15' => [
        'display-name' => 'min-lines = 15',
        'flags' => [ '--min-lines=15' ],
        'display-flags' => '--min-lines=15',
    ],
    'phpcpd-min-tokens-15' => [
        'display-name' => 'min-tokens = 15',
        'flags' => [ '--min-tokens=15' ],
        'display-flags' => '--min-tokens=15',
        'conflicts' => [ 'phpcpd-min-tokens-15', 'phpcpd-min-tokens-30', 'phpcpd-min-tokens-50', 'phpcpd-min-tokens-70', 'phpcpd-min-tokens-100', 'phpcpd-min-tokens-150' ],
    ],
    'phpcpd-min-tokens-30' => [
        'display-name' => 'min-tokens = 30',
        'flags' => [ '--min-tokens=30' ],
        'display-flags' => '--min-tokens=30',
        'conflicts' => [ 'phpcpd-min-tokens-15', 'phpcpd-min-tokens-30', 'phpcpd-min-tokens-50', 'phpcpd-min-tokens-70', 'phpcpd-min-tokens-100', 'phpcpd-min-tokens-150' ],
    ],
    'phpcpd-min-tokens-50' => [
        'display-name' => 'min-tokens = 50',
        'flags' => [ '--min-tokens=50' ],
        'display-flags' => '--min-tokens=50',
        'conflicts' => [ 'phpcpd-min-tokens-15', 'phpcpd-min-tokens-30', 'phpcpd-min-tokens-50', 'phpcpd-min-tokens-70', 'phpcpd-min-tokens-100', 'phpcpd-min-tokens-150' ],
    ],
    'phpcpd-min-tokens-70' => [
        'display-name' => 'min-tokens = 70 (default)',
        'flags' => [ '--min-tokens=70' ],
        'display-flags' => '--min-tokens=70',
        'conflicts' => [ 'phpcpd-min-tokens-15', 'phpcpd-min-tokens-30', 'phpcpd-min-tokens-50', 'phpcpd-min-tokens-70', 'phpcpd-min-tokens-100', 'phpcpd-min-tokens-150' ],
    ],
    'phpcpd-min-tokens-100' => [
        'display-name' => 'min-tokens = 100',
        'flags' => [ '--min-tokens=100' ],
        'display-flags' => '--min-tokens=100',
        'conflicts' => [ 'phpcpd-min-tokens-15', 'phpcpd-min-tokens-30', 'phpcpd-min-tokens-50', 'phpcpd-min-tokens-70', 'phpcpd-min-tokens-100', 'phpcpd-min-tokens-150' ],
    ],
    'phpcpd-min-tokens-150' => [
        'display-name' => 'min-tokens = 150',
        'flags' => [ '--min-tokens=150' ],
        'display-flags' => '--min-tokens=150',
        'conflicts' => [ 'phpcpd-min-tokens-15', 'phpcpd-min-tokens-30', 'phpcpd-min-tokens-50', 'phpcpd-min-tokens-70', 'phpcpd-min-tokens-100', 'phpcpd-min-tokens-150' ],
    ],
];

$compilers = array_filter(
    array_merge(
        makePhpReleases(),
        makePhpSnapshots(),
        makeHhvm(),
        makeHippy(),
        makeCodeSniffer()
    ),
    function ($value) {
        return !empty($value);
    }
);

echo json_encode(
    [
        'switches' => $switches,
        'compilers' => array_values($compilers),
    ],
    JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES
) . "\n";

function makePhpReleases()
{
    $versions = array_filter(
        getPhpVersionList(),
        function ($version) {
            return preg_match('/^[\d.]+$/', $version);
        }
    );
    return array_map(
        function ($version) {
            $versionMajMin = preg_replace('/^(\d+\.\d+).+$/', "$1", $version);
            return [
                'compile-command' => [
                    '/bin/true',
                ],
                // 'compile-command' => [
                //     '/opt/fetus/wandbox-preprocessor/preprocessor4php',
                //     'prog.php',
                // ],
                'name' => "php-{$version}",
                'language' => 'PHP ' . $versionMajMin,
                'output-file' => 'prog.php',
                'displayable' => true,
                'version-command' => [
                    '/bin/sh',
                    '-c',
                    "/opt/php/php-{$version}/bin/php -v head -1 | cut -d' ' -f2",
                ],
                'run-command' => [
                    "/opt/php/php-{$version}/bin/php",
                    "-d date.timezone=UTC",
                    'prog.php',
                ],
                'display-compile-command' => 'php prog.php',
                'display-name' => 'PHP',
                'runtime-option-raw' => false,
                'switches' => [
                ],
            ];
        },
        $versions
    );
}

function makePhpSnapshots()
{
    $versions = array_filter(
        getPhpVersionList(),
        function ($version) {
            return $version === 'master' || strpos($version, 'snapshot') !== false;
        }
    );
    return array_map(
        function ($version) {
            $exePath = ($version === 'master')
                ? '/opt/php/php-head/bin/php'
                : sprintf(
                    '/opt/php/php-%s-head/bin/php',
                    preg_replace('/snapshot$/', '', $version)
                );
            if (!file_exists($exePath)) {
                return null;
            }
            $realVersion = exec(
                '/usr/bin/env ' .
                escapeshellarg($exePath) . ' ' .
                '-r ' . escapeshellarg(
                    "echo PHP_MAJOR_VERSION . '.' . PHP_MINOR_VERSION . '.' . PHP_RELEASE_VERSION;"
                )
            );
            return [
                'compile-command' => [
                    '/bin/true',
                ],
                // 'compile-command' => [
                //     '/opt/fetus/wandbox-preprocessor/preprocessor4php',
                //     'prog.php',
                // ],
                'name' => "php-{$version}",
                'language' => 'PHP HEADs',
                'output-file' => 'prog.php',
                'displayable' => true,
                'version-command' => [
                    '/bin/sh',
                    '-c',
                    "{$exePath} -v head -1 | cut -d' ' -f2",
                ],
                'run-command' => [
                    "{$exePath}",
                    "-d date.timezone=UTC",
                    'prog.php',
                ],
                'display-compile-command' => 'php prog.php',
                'display-name' => 'PHP HEAD',
                'runtime-option-raw' => false,
                'switches' => [
                ],
            ];
        },
        $versions
    );
}

function makeHhvm()
{
    $versions = [
        'head',
        '3.7-head',
        '3.6-head',
        '3.3-head',
        '3.7.0',
        '3.6.2',
        '3.6.1',
        '3.3.5',
    ];
    return array_map(
        function ($version) {
            return [
                'name' => "hhvm-{$version}",
                'language' => 'HHVM',
                'output-file' => 'prog.php',
                'displayable' => true,
                'version-command' => [
                    '/bin/sh',
                    '-c',
                    "/opt/hhvm/hhvm-{$version}/bin/hhvm --version | cut -d' ' -f3",
                ],
                //'compile-command' => [
                //    '/opt/fetus/wandbox-preprocessor/preprocessor4php',
                //    '--hack',
                //    'prog.php',
                //],
                'compile-command' => [
                    '/usr/bin/touch',
                    '.hhconfig',
                ],
                'run-command' => [
                    "/opt/hhvm/hhvm-{$version}/bin/hhvm",
                    "-d date.timezone=Etc/UTC",
                    'prog.php',
                ],
                'display-compile-command' => 'hhvm prog.php',
                'display-name' => strpos($version, 'head') === false ? 'HHVM' : 'HHVM HEAD',
                'runtime-option-raw' => false,
                'switches' => [
                ],
            ];
        },
        $versions
    );
}

function makeHippy()
{
    return [
        [
            'name' => "hippy-c8a1d94",
            'language' => 'HippyVM',
            'output-file' => 'prog.php',
            'displayable' => true,
            'version-command' => [
                '/bin/echo',
                'c8a1d94@20150317',
            ],
            'compile-command' => [
                '/bin/true',
            ],
            'run-command' => [
                '/opt/hippy/hippy-20150317-c8a1d94/hippy-c',
                'prog.php',
            ],
            'display-compile-command' => 'hippy-c prog.php',
            'display-name' => 'HippyVM',
            'runtime-option-raw' => false,
            'switches' => [
            ],
        ],
    ];
}

function makeCodeSniffer()
{
    $stdList = [
        'codesnif-std-psr2',
        'codesnif-std-psr1',
        'codesnif-std-zend',
        'codesnif-std-pear',
        'codesnif-std-phpcs',
        'codesnif-std-squiz',
        'codesnif-std-mysource',
    ];
    $phpcs = [
        'compile-command' => [
            '/opt/fetus/code-sniffer/vendor/bin/phpcs',
            '--no-colors',
            '--encoding=UTF-8',
            'prog.php',
        ],
        'name' => "phpcs",
        'language' => 'Utility',
        'output-file' => 'prog.php',
        'displayable' => true,
        'version-command' => [
            '/bin/sh',
            '-c',
            "/opt/fetus/code-sniffer/vendor/bin/phpcs --version | head -1 | cut -d' ' -f3",
        ],
        'run-command' => '/bin/true',
        'display-compile-command' => 'phpcs --encoding=UTF-8 prog.php',
        'display-name' => 'phpcs',
        'runtime-option-raw' => false,
        'switches' => $stdList,
    ];
    $phpcbf = [
        'compile-command' => [
            '/opt/fetus/code-sniffer/phpcbf-wrapper',
            'prog.php',
        ],
        'name' => "phpcbf",
        'language' => 'Utility',
        'output-file' => 'prog.php',
        'displayable' => true,
        'version-command' => [
            '/bin/sh',
            '-c',
            "/opt/fetus/code-sniffer/vendor/bin/phpcbf --version | head -1 | cut -d' ' -f3",
        ],
        'run-command' => [
            '/bin/cat',
            'prog.php',
        ],
        'display-compile-command' => 'phpcbf --encoding=UTF-8 prog.php',
        'display-name' => 'phpcbf',
        'runtime-option-raw' => false,
        'switches' => $stdList,
    ];
    $phpmd = [
        'compile-command' => [
            '/opt/fetus/code-sniffer/phpmd-wrapper',
            'prog.php',
        ],
        'name' => 'phpmd',
        'language' => 'Utility',
        'output-file' => 'prog.php',
        'displayable' => true,
        'version-command' => [
            '/bin/sh',
            '-c',
            "/opt/fetus/code-sniffer/vendor/bin/phpmd --version | head -1 | cut -d' ' -f2",
        ],
        'run-command' => [ '/bin/true' ],
        'runtime-option-raw' => false,
        'display-compile-command' => 'phpmd prog.php text',
        'display-name' => 'phpmd',
        'switches' => [
            'phpmd-cleancode',
            'phpmd-codesize',
            'phpmd-controversial',
            'phpmd-design',
            'phpmd-naming',
            'phpmd-unusedcode',
        ],
        'initial-checked' => [
            'phpmd-cleancode',
            'phpmd-codesize',
            //'phpmd-controversial',
            'phpmd-design',
            'phpmd-naming',
            'phpmd-unusedcode',
        ]
    ];
    $phpcpd = [
        'compile-command' => [
            '/opt/fetus/code-sniffer/vendor/bin/phpcpd',
            '--no-ansi',
            '--no-interaction',
            'prog.php',
        ],
        'name' => 'phpcpd',
        'language' => 'Utility',
        'output-file' => 'prog.php',
        'displayable' => true,
        'version-command' => [
            '/bin/sh',
            '-c',
            "/opt/fetus/code-sniffer/vendor/bin/phpcpd --version | head -1 | cut -d' ' -f2",
        ],
        'run-command' => [ '/bin/true' ],
        'runtime-option-raw' => false,
        'display-compile-command' => 'phpcpd --no-interaction prog.php',
        'display-name' => 'phpcpd',
        'switches' => [
            'phpcpd-fuzzy',
            'phpcpd-min-lines-2', 'phpcpd-min-lines-4', 'phpcpd-min-lines-7', 'phpcpd-min-lines-10', 'phpcpd-min-lines-15',
            'phpcpd-min-tokens-15', 'phpcpd-min-tokens-30', 'phpcpd-min-tokens-50', 'phpcpd-min-tokens-70', 'phpcpd-min-tokens-100', 'phpcpd-min-tokens-150',
        ],
        'initial-checked' => [
            'phpcpd-min-lines-4',
            'phpcpd-min-tokens-70',
        ],
    ];
    $json_format = [
        'compile-command' => [
            '/bin/true',
        ],
        'name' => 'json_format',
        'language' => 'Utility',
        'output-file' => 'input.json',
        'displayable' => true,
        'version-command' => [
            '/bin/echo',
            '?',
        ],
        'run-command' => [
            '/opt/fetus/code-sniffer/json_format',
            'input.json',
        ],
        'runtime-option-raw' => false,
        'display-compile-command' => 'json_format input.json',
        'display-name' => 'json_format',
        'switches' => [],
    ];
    return [
        $phpcs,
        $phpcbf,
        $phpmd,
        $phpcpd,
        $json_format,
    ];
}

// php-build で作成可能な PHP バージョンの一覧を取得
function getPhpVersionList()
{
    $cmdline = sprintf(
        '/usr/bin/env %s --definitions | %s -r',
        escapeshellarg('php-build'),
        escapeshellarg(__DIR__ . '/versionsort')
    );
    exec($cmdline, $lines, $status);
    if ($status !== 0) {
        fwrite(STDERR, "Could not get version list from php-build\n");
        exit(1);
    }
    return array_map(
        function ($a) {
            return trim($a);
        },
        $lines
    );
}
