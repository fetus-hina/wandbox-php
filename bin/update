#!/usr/bin/php
<?php
$skipBuild = !!in_array('--skip', $argv);
$targets = [
    'php-5.2' => [
        'name' => 'PHP 5.2',
        'version' => getRelease('5.2'),
        'srcPatch' => ['php_dom.patch'],
    ],
    'php-5.3' => [
        'name' => 'PHP 5.3',
        'version' => getRelease('5.3'),
        'fixStdCpp' => true,
        'srcPatch' => ['php_dom.patch'],
    ],
    'php-5.4' => [
        'name' => 'PHP 5.4',
        'version' => getRelease('5.4')
    ],
    'php-5.5' => [
        'name' => 'PHP 5.5',
        'version' => getRelease('5.5')
    ],
    'php-5.6' => [
        'name' => 'PHP 5.6',
        'version' => getRelease('5.6')
    ],
    #'php-5.3.3' => [
    #    'name' => 'PHP 5.3.3',
    #    'version' => '5.3.3',
    #    'fixStdCpp' => true,
    #    'srcPatch' => ['php_dom.patch'],
    #],
    'php-5.5-head' => [
        'name' => 'PHP 5.5 HEAD',
        'version' => '5.5snapshot',
    ],
    'php-5.6-head' => [
        'name' => 'PHP 5.6 HEAD',
        'version' => '5.6snapshot',
    ],
    'php-head' => [
        'name' => 'PHP HEAD',
        'version' => 'master',
    ],
    'php-5.4.16' => [
        'name' => 'PHP 5.4.16',
        'version' => '5.4.16',
        'builtin' => '/usr/bin/php',
    ],
];

$successful = true;
$json = [
    'switches' => [
        'dummy' => [
            'display-name' => 'dummy',
            'flags' => [],
        ],
    ],
    'compilers' => [
    ],
];
foreach ($targets as $outdirname => $info) {
    if (isset($info['builtin'])) {
        $outphp = $info['builtin'];
    } else {
        $outdir = '/opt/php/' . $outdirname;
        $outphp = $outdir . '/bin/php';
        if (!file_exists($outphp) || !isInstalled($outphp, $info['version'])) {
            if ($skipBuild) {
                echo "Skip building " . $info['version'] . "\n";
            } else {
                echo 'Install ' . $info['version'] . ' to ' . $outdir . "\n";
                if (isset($info['srcPatch'])) {
                    foreach ($info['srcPatch'] as $patch) {
                        addSourcePatchSetting($info['version'], $patch);
                    }
                }
                if ((isset($info['fixStdCpp']) && $info['fixStdCpp'])) {
                    $cmdline = sprintf(
                        '/usr/bin/env EXTRA_LIBS=-lstdc++ php-build %s %s',
                        escapeshellarg($info['version']),
                        escapeshellarg($outdir)
                    );
                } else {
                    $cmdline = sprintf(
                        '/usr/bin/env php-build %s %s',
                        escapeshellarg($info['version']),
                        escapeshellarg($outdir)
                    );
                }
                passthru($cmdline, $status);
                if ($status !== 0) {
                    $successful = false;
                }
	    }
        } else {
            echo $info['version'] . ": already exists.\n";
        }
    }
    $json['compilers'][] = [
        'compile-command' => '/bin/true',
        'name' => $info['name'],
        'language' => 'PHP',
        'output-file' => 'prog.php',
        'displayable' => true,
        'version-command' => [
            '/bin/sh',
            '-c',
            $outphp . " -v | head -1 | cut -d' ' -f2",
        ],
        'run-command' => [
            $outphp,
            'prog.php',
        ],
        'display-compile-command' => 'php prog.php',
        'display-name' => preg_replace('/\s*[\d\.]+(?:\s+HEAD)?$/', '', $info['name']),
        'runtime-option-raw' => true,
        'x-order-name' => 'PHP ' . $info['version'],
    ];
}
/*
$json['compilers'][] = [
    'compile-command' => '/bin/true',
    'name' => 'HHVM-PHP',
    'language' => 'PHP',
    'output-file' => 'prog.php',
    'displayable' => true,
    'version-command' => [
        '/bin/sh',
        '-c',
        "/usr/local/bin/hhvm --version | head -1 | cut -d' ' -f3"
    ],
    'run-command' => [
        '/usr/local/bin/hhvm',
        'prog.php',
    ],
    'display-compile-command' => 'hhvm prog.php',
    'display-name' => 'HHVM(PHP)',
    'runtime-option-raw' => true,
    'x-order-name' => 'HHVM PHP',
];
$json['compilers'][] = [
    'compile-command' => '/bin/true',
    'name' => 'HHVM-Hack',
    'language' => 'Hack',
    'output-file' => 'prog.hh',
    'displayable' => true,
    'version-command' => [
        '/bin/sh',
        '-c',
        "/usr/local/bin/hhvm --version | head -1 | cut -d' ' -f3"
    ],
    'run-command' => [
        '/usr/local/bin/hhvm',
        'prog.hh',
    ],
    'display-compile-command' => 'hhvm prog.hh',
    'display-name' => 'HHVM(Hack)',
    'runtime-option-raw' => true,
    'x-order-name' => 'HHVM Hack',
];
*/
usort(
    $json['compilers'],
    function ($lhs, $rhs) {
        return -1 * strnatcasecmp($lhs['x-order-name'], $rhs['x-order-name']);
    }
);

file_put_contents(
    '/opt/wandbox/etc/cattleshed.conf.d/compilers.default',
    json_encode($json, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES) . "\n"
);

function getRelease($major)
{
    $versionsort = escapeshellarg(__DIR__ . '/versionsort');
    $cmdline = "/usr/bin/env php-build --definitions | grep '^{$major}\.' | {$versionsort} | tail -n 1";
    $ret = exec($cmdline, $lines, $status);
    if ($status !== 0) {
        die;
    }
    return trim($ret);
}

function isInstalled($phpPath, $version)
{
    $cmdline = '/usr/bin/env ' . escapeshellarg($phpPath) . ' --version | head -n 1 | awk ' . escapeshellarg('{print $2}');
    $ret = exec($cmdline, $lines, $status);
    if ($status !== 0) {
        die;
    }
    return trim($ret) === (string)$version;
}

function addSourcePatchSetting($version, $patch)
{
    $confPath = '/usr/local/share/php-build/definitions/' . $version;
    $confLine = "patch_file \"{$patch}\"";
    $conf = file_get_contents($confPath);
    if (preg_match('/^' . preg_quote($confLine, '$/') . '/m', $conf)) {
        echo "Source patch {$patch} already configured\n";
        return;
    }
    $conf = preg_replace('/^(?=install_package)/m', $confLine . "\n", $conf);
    file_put_contents($confPath, $conf);
}
