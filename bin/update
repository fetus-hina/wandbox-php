#!/usr/bin/php
<?php
function getPatches($version)
{
    $patches = [];
    if (version_compare($version, '5.4.7', '<')) {
        $patches[] = 'php_dom.patch';
    }
    return $patches;
}

// 一部のバージョンのビルドスクリプトが C++ なのに libc++ をリンクしない問題があるので
// 該当するバージョンならリンクをいじる
function fixLinkCPlusPlus($version)
{
    return version_compare($version, '5.3.0', '>=') &&
           version_compare($version, '5.4.0', '<');
}

// php-build で作成可能な PHP バージョンの一覧を取得
function getPhpVersionList()
{
    $cmdline = sprintf(
        '/usr/bin/env %s --definitions | %s',
        escapeshellarg('php-build'),
        escapeshellarg(__DIR__ . '/versionsort')
    );
    exec($cmdline, $lines, $status);
    if ($status !== 0) {
        fwrite(STDERR, "Could not get version list from php-build\n");
        exit(1);
    }
    return array_map(
        function ($a) {
            return trim($a);
        },
        $lines
    );
}

$skipVersions = [
    '5.4snapshot',
];

foreach (getPhpVersionList() as $version) {
    if (in_array($version, $skipVersions)) {
        echo "Skip: {$version}\n";
        continue;
    }
    if (preg_match('/^[\d.]+$/', $version)) { // release
        $outdir = '/opt/php/php-' . $version;
        $force = false;
    } elseif (strpos($version, 'snapshot') !== false) {
        $outdir = sprintf(
            '/opt/php/php-%s-head',
            preg_replace('/snapshot$/', '', $version)
        );
        $force = true;
    } elseif ($version === 'master') {
        $outdir = '/opt/php/php-head';
        $force = true;
    } else {
        continue;
    }

    if (!$force && file_exists($outdir . '/bin/php')) {
        echo "Already exists: $version\n";
        continue;
    }

    echo "**** BUILDING PHP {$version} ****\n";

    if ($patches = getPatches($version)) {
        foreach (array_reverse($patches) as $patch) {
            addSourcePatchSetting($version, $patch);
        }
    }
    if (fixLinkCPlusPlus($version)) {
        $cmdline = sprintf(
            '/usr/bin/env CFLAGS="-O3 -march=native -mtune=native" CXXFLAGS="-O3 -march=native -mtune=native" EXTRA_LIBS=-lstdc++ php-build %s %s',
            escapeshellarg($version),
            escapeshellarg($outdir)
        );
    } else {
        $cmdline = sprintf(
            '/usr/bin/env CFLAGS="-O3 -march=native -mtune=native" CXXFLAGS="-O3 -march=native -mtune=native" php-build %s %s',
            escapeshellarg($version),
            escapeshellarg($outdir)
        );
    }
    passthru($cmdline, $status);
}

function addSourcePatchSetting($version, $patch)
{
    $confPath = '/usr/local/share/php-build/definitions/' . $version;
    $confLine = "patch_file \"{$patch}\"";
    $conf = file_get_contents($confPath);
    if (preg_match('/^' . preg_quote($confLine, '$/') . '/m', $conf)) {
        echo "Source patch {$patch} already configured\n";
        return;
    }
    $conf = preg_replace('/^(?=install_package)/m', $confLine . "\n", $conf);
    file_put_contents($confPath, $conf);
}
